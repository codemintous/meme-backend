import { Request, Response } from 'express';
import ChatHistory from '../models/ChatHistory';
import ImageHistory from '../models/ImageHistory';
import User from '../models/User';
import Meme from '../models/Meme';

// Get chat history for a user (optionally filtered by agent)
export const getChatHistory = async (req: Request, res: Response) => {
    try {
        const userId = req.user?._id;
        const { agentId } = req.query;

        if (!userId) {
            return res.status(401).json({ error: 'User not authenticated' });
        }

        const query = {
            userId: userId,
            ...(agentId ? { agentId: agentId } : {})
        };

        const history = await ChatHistory.find(query)
            .sort({ createdAt: -1 }) // Most recent first
            .limit(50);  // Limit to last 50 messages

        res.json(history);
    } catch (error) {
        console.error('Error fetching chat history:', error);
        res.status(500).json({ error: 'Failed to fetch chat history' });
    }
};

// Get image generation history for a user (optionally filtered by agent)
export const getImageHistory = async (req: Request, res: Response) => {
    try {
        const userId = req.user?._id;
        const { agentId } = req.query;
        console.log('Getting image history with params:', { userId, agentId });

        if (!userId) {
            console.log('No authenticated user found');
            return res.status(401).json({ error: 'User not authenticated' });
        }

        const query = {
            userId: userId,
            ...(agentId ? { agentId: agentId } : {})
        };
        console.log('Executing image history query:', query);

        const history = await ImageHistory.find(query)
            .sort({ createdAt: -1 }) // Most recent first
            .limit(20);  // Limit to last 20 images
        console.log('Found image history entries:', history.length);

        res.json(history);
    } catch (error) {
        console.error('Error fetching image history:', error);
        res.status(500).json({ error: 'Failed to fetch image history' });
    }
};

// Get chat history for a specific agent (admin only)
export const getAgentChatHistory = async (req: Request, res: Response) => {
    try {
        const { agentId } = req.params;
        
        if (!agentId) {
            return res.status(400).json({ error: 'Agent ID is required' });
        }

        const history = await ChatHistory.find({ agentId })
            .sort({ createdAt: -1 })
            .limit(100);

        res.json(history);
    } catch (error) {
        console.error('Error fetching agent chat history:', error);
        res.status(500).json({ error: 'Failed to fetch agent chat history' });
    }
};

// Get image generation history for a specific agent (admin only)
export const getAgentImageHistory = async (req: Request, res: Response) => {
    try {
        const { agentId } = req.params;
        
        if (!agentId) {
            return res.status(400).json({ error: 'Agent ID is required' });
        }

        const history = await ImageHistory.find({ agentId })
            .sort({ createdAt: -1 })
            .limit(50);

        res.json(history);
    } catch (error) {
        console.error('Error fetching agent image history:', error);
        res.status(500).json({ error: 'Failed to fetch agent image history' });
    }
};

// Get all images generated by a user's wallet address
export const getImagesByUserAddress = async (req: Request, res: Response) => {
    try {
        const { userAddress } = req.params;

        if (!userAddress) {
            return res.status(400).json({ error: 'User address is required' });
        }

        // Find the user by their wallet address
        const user = await User.findOne({ walletAddress: userAddress });

        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        // Get all images generated by this user
        const images = await ImageHistory.find({ userId: user._id })
            .sort({ createdAt: -1 }); // Most recent first

        res.json(images);
    } catch (error) {
        console.error('Error fetching user images:', error);
        res.status(500).json({ error: 'Failed to fetch user images' });
    }
};

// Get all images for a specific agent with meme details
export const getAllAgentImages = async (req: Request, res: Response) => {
    try {
        const { agentId } = req.params;

        if (!agentId) {
            return res.status(400).json({ error: 'Agent ID is required' });
        }

        // Find the meme/agent details
        const meme = await Meme.findById(agentId);

        if (!meme) {
            return res.status(404).json({ error: 'Agent not found' });
        }

        // Get all images for this agent
        const images = await ImageHistory.find({ agentId })
            .sort({ createdAt: -1 }); // Most recent first

        res.json({
            agent: {
                name: meme.name,
                description: meme.description,
                personality: meme.personality,
                tokenDetails: meme.tokenDetails
            },
            images: images
        });
    } catch (error) {
        console.error('Error fetching agent images:', error);
        res.status(500).json({ error: 'Failed to fetch agent images' });
    }
};

// Get combined chat history with flexible filtering
export const getCombinedChatHistory = async (req: Request, res: Response) => {
    try {
        const { agentId, userAddress } = req.query;
        let query: any = {};
        console.log('Getting combined chat history with params:', { agentId, userAddress });

        // If userAddress is provided, find the user and add to query
        if (userAddress) {
            const user = await User.findOne({ userAddress });
            if (!user) {
                console.log('User not found for address:', userAddress);
                return res.status(404).json({ error: 'User not found' });
            }
            query.userId = user._id;
            console.log('Found user:', user._id);
        } else {
            // If no userAddress provided, use the authenticated user's ID
            const userId = req.user?._id;
            if (!userId) {
                console.log('No authenticated user found');
                return res.status(401).json({ error: 'User not authenticated' });
            }
            query.userId = userId;
            console.log('Using authenticated user:', userId);
        }

        // Add agent filter if provided
        if (agentId) {
            query.agentId = agentId;
            console.log('Filtering by agent:', agentId);
        }

        console.log('Executing query:', query);
        const conversations = await ChatHistory.find(query)
            .sort({ updatedAt: -1 }) // Most recent conversations first
            .limit(50);  // Limit to last 50 conversations

        // Flatten messages from all conversations
        const allMessages = conversations.flatMap(conv => 
            conv.messages.map(msg => ({
                conversationId: conv.conversationId,
                message: msg.message,
                response: msg.response,
                imageUrl: msg.imageUrl,
                timestamp: msg.timestamp
            }))
        ).sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())
         .slice(0, 100); // Limit to last 100 messages

        console.log('Found chat history entries:', allMessages.length);

        // Get agent details if agentId is provided
        let agentDetails = null;
        if (agentId) {
            const meme = await Meme.findById(agentId);
            if (meme) {
                agentDetails = {
                    name: meme.name,
                    description: meme.description,
                    personality: meme.personality,
                    tokenDetails: meme.tokenDetails
                };
                console.log('Found agent details:', agentDetails);
            }
        }

        res.json({
            conversations: conversations.map(conv => ({
                conversationId: conv.conversationId,
                createdAt: conv.createdAt,
                updatedAt: conv.updatedAt,
                messageCount: conv.messages.length
            })),
            messages: allMessages,
            agentDetails,
            totalMessages: allMessages.length
        });
    } catch (error) {
        console.error('Error fetching combined chat history:', error);
        res.status(500).json({ error: 'Failed to fetch chat history' });
    }
};

// Get images filtered by user address and agent
export const getFilteredImages = async (req: Request, res: Response) => {
    try {
        const { userAddress, agentId } = req.query;
        console.log('Getting filtered images with params:', { userAddress, agentId });

        if (!userAddress) {
            return res.status(400).json({ error: 'User address is required' });
        }

        // Find the user by their wallet address
        const user = await User.findOne({ userAddress: userAddress });
        if (!user) {
            console.log('User not found for address:', userAddress);
            return res.status(404).json({ error: 'User not found' });
        }

        // Build query
        const query: any = { userId: user._id };
        if (agentId) {
            query.agentId = agentId;
        }

        console.log('Executing image query:', query);
        const images = await ImageHistory.find(query)
            .sort({ createdAt: -1 }) // Most recent first
            .limit(50);  // Limit to last 50 images

        // Get agent details if agentId is provided
        let agentDetails = null;
        if (agentId) {
            const meme = await Meme.findById(agentId);
            if (meme) {
                agentDetails = {
                    name: meme.name,
                    description: meme.description,
                    personality: meme.personality,
                    tokenDetails: meme.tokenDetails
                };
            }
        }

        // Set cache control headers to prevent caching
        res.set({
            'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0'
        });

        res.json({
            images,
            agentDetails,
            totalImages: images.length
        });
    } catch (error) {
        console.error('Error fetching filtered images:', error);
        res.status(500).json({ error: 'Failed to fetch images' });
    }
};
