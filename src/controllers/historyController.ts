import { Request, Response } from 'express';
import ChatHistory from '../models/ChatHistory';
import ImageHistory from '../models/ImageHistory';
import User from '../models/User';
import Meme from '../models/Meme';

// Get chat history for a user (optionally filtered by agent)
export const getChatHistory = async (req: Request, res: Response) => {
    try {
        const userId = req.user?._id;
        const { agentId } = req.query;

        if (!userId) {
            return res.status(401).json({ error: 'User not authenticated' });
        }

        const query = {
            userId: userId,
            ...(agentId ? { agentId: agentId } : {})
        };

        const history = await ChatHistory.find(query)
            .sort({ createdAt: -1 }) // Most recent first
            .limit(50);  // Limit to last 50 messages

        res.json(history);
    } catch (error) {
        console.error('Error fetching chat history:', error);
        res.status(500).json({ error: 'Failed to fetch chat history' });
    }
};

// Get image generation history for a user (optionally filtered by agent)
export const getImageHistory = async (req: Request, res: Response) => {
    try {
        const userId = req.user?._id;
        const { agentId } = req.query;

        if (!userId) {
            return res.status(401).json({ error: 'User not authenticated' });
        }

        const query = {
            userId: userId,
            ...(agentId ? { agentId: agentId } : {})
        };

        const history = await ImageHistory.find(query)
            .sort({ createdAt: -1 }) // Most recent first
            .limit(20);  // Limit to last 20 images

        res.json(history);
    } catch (error) {
        console.error('Error fetching image history:', error);
        res.status(500).json({ error: 'Failed to fetch image history' });
    }
};

// Get chat history for a specific agent (admin only)
export const getAgentChatHistory = async (req: Request, res: Response) => {
    try {
        const { agentId } = req.params;
        
        if (!agentId) {
            return res.status(400).json({ error: 'Agent ID is required' });
        }

        const history = await ChatHistory.find({ agentId })
            .sort({ createdAt: -1 })
            .limit(100);

        res.json(history);
    } catch (error) {
        console.error('Error fetching agent chat history:', error);
        res.status(500).json({ error: 'Failed to fetch agent chat history' });
    }
};

// Get image generation history for a specific agent (admin only)
export const getAgentImageHistory = async (req: Request, res: Response) => {
    try {
        const { agentId } = req.params;
        
        if (!agentId) {
            return res.status(400).json({ error: 'Agent ID is required' });
        }

        const history = await ImageHistory.find({ agentId })
            .sort({ createdAt: -1 })
            .limit(50);

        res.json(history);
    } catch (error) {
        console.error('Error fetching agent image history:', error);
        res.status(500).json({ error: 'Failed to fetch agent image history' });
    }
};

// Get all images generated by a user's wallet address
export const getImagesByUserAddress = async (req: Request, res: Response) => {
    try {
        const { userAddress } = req.params;

        if (!userAddress) {
            return res.status(400).json({ error: 'User address is required' });
        }

        // Find the user by their wallet address
        const user = await User.findOne({ walletAddress: userAddress });

        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        // Get all images generated by this user
        const images = await ImageHistory.find({ userId: user._id })
            .sort({ createdAt: -1 }); // Most recent first

        res.json(images);
    } catch (error) {
        console.error('Error fetching user images:', error);
        res.status(500).json({ error: 'Failed to fetch user images' });
    }
};

// Get all images for a specific agent with meme details
export const getAllAgentImages = async (req: Request, res: Response) => {
    try {
        const { agentId } = req.params;

        if (!agentId) {
            return res.status(400).json({ error: 'Agent ID is required' });
        }

        // Find the meme/agent details
        const meme = await Meme.findById(agentId);

        if (!meme) {
            return res.status(404).json({ error: 'Agent not found' });
        }

        // Get all images for this agent
        const images = await ImageHistory.find({ agentId })
            .sort({ createdAt: -1 }); // Most recent first

        res.json({
            agent: {
                name: meme.name,
                description: meme.description,
                personality: meme.personality,
                tokenDetails: meme.tokenDetails
            },
            images: images
        });
    } catch (error) {
        console.error('Error fetching agent images:', error);
        res.status(500).json({ error: 'Failed to fetch agent images' });
    }
};
